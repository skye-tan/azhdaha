use std::{fs::File, os::fd::AsRawFd};

use anyhow::{Context, bail};
use compile_commands::CompilationDatabase;
use log::error;
use tree_sitter::{Parser, Tree};

use crate::preprocess::{SourceInfo, preprocess};

pub struct AstRepr {
    /// The source code which the tree has been generated from.
    pub source_info: SourceInfo,
    /// The tree generated by the tree-sitter.
    pub tree: Tree,
}

impl AstRepr {
    pub fn create_dot_graph(&self, path: &str) -> anyhow::Result<()> {
        let file = File::create(path)?;

        self.tree.print_dot_graph(&file.as_raw_fd());

        Ok(())
    }

    pub fn new_single_file(text: &str) -> anyhow::Result<Self> {
        let source_info = SourceInfo {
            path: "main.c".to_owned(),
            code: text.as_bytes().to_vec(),
        };

        let mut parser = Parser::new();
        parser
            .set_language(&tree_sitter_c::LANGUAGE.into())
            .context("Failed to load C grammar.")?;

        let Some(tree) = parser.parse(&source_info.code, None) else {
            bail!("Failed to parse using tree-sitter.");
        };
        Ok(AstRepr { source_info, tree })
    }

    pub fn construct(compile_commands: &CompilationDatabase) -> anyhow::Result<Vec<Self>> {
        let mut parser = Parser::new();
        parser
            .set_language(&tree_sitter_c::LANGUAGE.into())
            .context("Failed to load C grammar.")?;

        let mut asts = vec![];

        for source_info in preprocess(compile_commands)? {
            let Some(tree) = parser.parse(&source_info.code, None) else {
                error!("Failed to parse using tree-sitter.");
                continue;
            };

            asts.push(AstRepr { source_info, tree });
        }

        Ok(asts)
    }
}
